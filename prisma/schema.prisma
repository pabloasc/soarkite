generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  VIBECODER
}

enum RequestUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ExperienceLevel {
  INTERMEDIATE
  SENIOR
  LEAD
  ARCHITECT
  DIRECTOR
}

model User {
  id                  String               @id
  email               String               @unique
  name                String?
  role                UserRole             @default(USER)
  image_url           String?              @map("image_url")
  theme               String?              @default("light")
  language            String?              @default("en")
  country             String?
  timezone            String?
  email_notifications Boolean              @default(true)
  created_at          DateTime             @default(now()) @map("created_at")
  updated_at          DateTime             @updatedAt @map("updated_at")
  reviews_given       DevReview[]          @relation("ReviewedBy")
  reviews_received    DevReview[]          @relation("ReviewFor")
  dev_profile         DevProfile?

  @@map("users")
}

model DevProfile {
  id                  String          @id @default(uuid())
  user_id             String          @unique
  user                User            @relation(fields: [user_id], references: [id])
  title               String // e.g., "Senior Full Stack Developer"
  experience_level    ExperienceLevel
  years_of_experience Int
  bio                 String          @db.Text
  timezone            String?
  hourly_rate         Decimal?        @db.Decimal(10, 2)
  github_url          String?
  linkedin_url        String?
  portfolio_url       String?
  skills              String[] // Programming languages, frameworks, tools
  ai_tools_experience Json[] // Array of { tool: string, years: number, expertise_level: string }
  specializations     String[] // e.g., ["Web Development", "Mobile Apps", "DevOps"]
  languages           String[] // Speaking languages
  certifications      Json[] // Array of { name: string, issuer: string, year: number }
  company             String?
  average_rating      Float           @default(0)
  total_reviews       Int             @default(0)
  total_sessions      Int             @default(0)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  @@map("dev_profiles")
}

model DevReview {
  id            String      @id @default(uuid())
  reviewer_id   String
  developer_id  String
  request_id    String
  rating        Int         @db.SmallInt // 1-5 rating
  comment       String?     @db.Text
  expertise     Int         @db.SmallInt // 1-5 rating
  communication Int         @db.SmallInt // 1-5 rating
  helpfulness   Int         @db.SmallInt // 1-5 rating
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  reviewer      User        @relation("ReviewedBy", fields: [reviewer_id], references: [id])
  developer     User        @relation("ReviewFor", fields: [developer_id], references: [id])

  @@unique([reviewer_id, request_id])
  @@map("dev_reviews")
}
